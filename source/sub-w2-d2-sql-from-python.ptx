<?xml version="1.0" encoding="UTF-8" ?>

<subsection xml:id="subsec-sql-from-python">
  <title>SQL in Python</title>
  <introduction>
    <p>
      We will now take a look at the basic mechanism for accessing a database from a language like Python. Each language will have its own approach, but typically there are two kinds of solutions:
      <ul>
        <li>A library that is specific to the particular database vendor you want to use, like sqlite3 for us. These libraries are typically responsible for simply allowing us to put SQL queries in a string and execute them. But they take care of some lower-level stuff like actually communicating with the corresponding database program.</li>
        <li>A higher-level library that allows us to code in a database-program-agnostic way, and allows us to integrate with many different database programs using the same set of tools on our end. These libraries often also provide ways to automatically turn database rows into some kind of object. SQLAlchemy and PonyORM are some standard such tools for Python, and we'll take a look at them later.</li>
      </ul>
      For now we'll focus on the first part: Direct interaction with a database using a library designed for it.
    </p>
  </introduction>
  <subsubsection xml:id="subsubsec-sqlite-in-python">
    <title>SQLite in Python</title>
    <p>Basic access to SQLite3 from Python can be obtained using the <url href="https://docs.python.org/3/library/sqlite3.html">sqlite3</url> library. There are typically a few steps involved:
      <ul>
        <li>Use the <c>sqlite3.connect(...)</c> function to obtain a <term>connection</term> to a specific database.</li>
        <li>Obtain a <term>cursor</term> object from the connection using <c>con.cursor()</c>.</li>
        <li>Use the cursor object to issue queries using <c>cur.execute(...)</c>.</li>
        <li>Call suitable methods on the result object, to read whatever data is needed. The result will typically be a tuple or a list of tuples, depending on whether you asked for one or more answers.</li>
      </ul>
      Here is a simple example for our database:
    </p>
    <program language="python">
      import sqlite3

      con = sqlite3.connect('chinook.sqlite')
      cur = con.cursor()
      res = cur.execute("SELECT * FROM Album")
      albums = res.fetchall()   # get all matches
      # Use res.fetchone() for only one match
      # albums is a list of tuples
      for album in albums:
          print(album)

      for albumId, title, artistId in albums:
          print(albumId, title, artistId)
    </program>
    <p>Note that we didn't need to place a semicolon at the end. </p>
    <p>An important question to consider is how to insert entries. Here's one way this might look like:</p>
    <program language="python">
      cur.execute("""INSERT INTO grade_points VALUES
          ('A', 4.0),
          ('A-', 3.67);
      """)
    </program>
    <p>
      However there is an important topic to consider, called <term>SQL injection</term>. Imagine that instead of literally typing out the letters and corresponding values, you were somehow instead obtaining them from user input. If the user was malicious, they could insert the appropriate text so that they change the command, and instead call out a different command. For example imagine that the user was providing us with the `A` part in `'A'`, and we were inserting it in using some sort of string concatenation. Imagine something like:
    </p>
    <program language="python">
      letter = input("Enter letter")
      points = input("Enter points")
      cur.execute(f"INSERT INTO grade_points VALUES ('{letter}', {points})");
    </program>
    <p>
      Now what would happen if the "letter" the user types is the string: <c>A', 1.00); DROP TABLE grade_points; --</c>.
      Then the the query would become:
    </p>
    <program language="sql">
      INSERT INTO grade_points VALUES ('A', 1.00); DROP TABLE grade_points; -- ...
    </program>
    <p>
      This program, when run, would perform the insertion of one entry, then immediately execute the DROP TABLE command which deletes the whole table. This is extremely dangerous, and a major security flaw! And it is commemorated in the classic xkcd comic strip:
    </p>
    <image source="https://imgs.xkcd.com/comics/exploits_of_a_mom.png">
      <shortdescription>XKCD exploits of a mom. Comic about the dangers of SQL injection.</shortdescription>
    </image>
    <p>
      Luckily there is a solution, using <term>parametrized queries</term>. A parametrized query contains <em>placeholders</em> instead of the actual values, and the values are provided as an extra parameter to the function call. It is then the machine's job to properly execute such a query. Here is an example of this:
    </p>
    <program language="python">
      grade_points = [
          ("A", 4.00), ("A-", 3.67),
          ("B+", 3.33), ("B", 3.0), ("B-", 2.67),
          ("C+", 2.33), ("C", 2.00), ("C-", 1.67),
          ("D+", 1.33), ("D", 1.00),
          ("F", 0.00)
      ]
      con.executemany("INSERT INTO grade_points VALUES (?, ?)", grade_points)
      con.commit()  # IMPORTANT! MUST COMMIT THE CONNECTION
    </program>
    <p>
      As this is the first time we see an insert statement executed, note one important detail: We must call the connection's <c>close</c> method in order to have our changes actually recorded. This is because the system automatically creates a transaction when we call <c>executemany</c>. If we are performing a SELECT then it doesn't matter, but for other operations we need to make sure to close when we are done. But note that the danger of SQL injections is present in SELECT queries as well, and the placeholder should be used there as well.
    </p>
    <p>
      Also note that we called <c>executemany</c> on the connection object, not a cursor object. This is possible to do, and it returns a cursor object.
    </p>
  </subsubsection>
    <exercises>
      <exercise>
        <p>
          Create the python code that creates the <c>grades</c> table from the earlier set of exercises.
        </p>
      </exercise>
      <exercise>
        <p>
          Assuming the list of <c>grade_points</c> list created above, write a function <c>randomGrade()</c> that returns a random letter grade from that list (so pick a random tuple from the list, then return its first entry). The common way to get a random entry from a list is: Use <c>random()</c> to get a random number between 0 and 1, multiply it by the length of the list (say n) to get a random number between 0 and n, then take the <c>math.floor(..)</c> of that to obtain an integer from 0 to n-1. Note: This problem has nothing to do with databases, it is a basic Python function.
        </p>
      </exercise>
      <exercise>
        <p>
          For this and subsequent problems assume the following definitions:
        </p>
        <program language="python">
          students = ["wahl", "skiadas", "lamarche"]
          courses = ["CS220", "CS223", "CS110", "CS243"]
          terms = [f"{period} {year}" for period in ["Fall", "Winter"] for year in range(2020, 2025)]
        </program>
        <p>
          Write a function <c>randomTerm()</c> that returns a random term. This is similar to the previous problem.
        </p>
      </exercise>
      <exercise>
        <p>
          Use a list comprehension that for each student and each course forms a tuple <c>(student, course, term, grade)</c> with a randomly generated term and grade using the previous functions. Your list comprehension should also have a 20% chance to not produce a grade for a particular student-course combination. You can do this by expecting that the result of a call to <c>random()</c> should be less than than 0.8. Since the random numbers go from 0 to 1 uniformly, 80% of them will be below 0.8.
        </p>
        <p>
          Store the result of this list comprehension to a variable called <c>grades</c>.
        </p>
      </exercise>
      <exercise>
        <p>
          Write Python code to insert all these grades from the previous problem into the sqlite database we have been working with. Make sure you use parametrized query for this.
        </p>
      </exercise>
      <exercise>
        <p>
          Write a separate program that starts by showing to the user all the students (by reading them from the database table, not the specific list we created earlier). Then it asks the user to pick a student name, and it retrieves all the grades for that student from the database, and prints them out in some basic tabular form.
        </p>
        <p>
          Once you have that working out, also report the average gpa for that student (computed directly from the database query). This is a good case for using <c>fetchone</c> instead of <c>fetchmany</c>. Make sure to again use a parametrized query.
        </p>
      </exercise>
    </exercises>
      <subsubsection xml:id="subsubsec-exporting-from-sqlite3">
    <title>Exporting from SQLite 3</title>
    <p>
      Before we start on duckdb, let's get some data we can work with. We will export the data we created in SQLite 3. There are fundamentally two ways to do this:
      <ul>
        <li>We can export a file with extension <c>.sql</c> often called a <term>SQL dump</term>. This is a file that contains a suitable sequent of CREATE TABLE and INSERT commands to recreate the entire database.</li>
        <li>We can export individual tables as CSV files. And CSV files can be readily consumed by many applications, including DuckDb.</li>
      </ul>
    </p>
    <paragraphs>
      <title>Dumping from SQLite</title>
    <p>
      To produce a SQL dump from SQLite3 you can use the following command from the terminal:
    </p>
    <program language="$">
      sqlite3 chinook.sqlite .dump &gt; chinook-dump.sql
    </program>
    <p>
      Here the <c>.dump</c> command tells the system to produce this dump, and by default it would just print the result to the terminal. Using <c>&gt; chinook-dump.sql</c> instead redirects the output to a file. You can open the file and peruse its contents.
    </p>
    <p>
      Unfortunately this produces SQL code that is not compatible with other systems, for a number of reasons:
      <ul>
        <li>First of all it surrounds the identifiers in square brackets, something that is highly non-standard. And telling it to not do this is actually extremely hard. So what you would want to do instead is search for <c>[</c> and <c>]</c> in the resulting SQL file and delete them (replace with nothing).</li>
        <li>It uses the <c>PRAGMA foreign_keys=OFF;</c> command which is not a general option in other databases. so we could simply delete that line.</li>
        <li>It creates tables in the wrong order. So it tries to create the Album table first, but that table has a foreign key constraint on the Artist table. We can solve this in one of two ways: Either move all the create table commands to be in the correct order, or make the tables first without the foreign key constraints, and then alter them to add the foreign key constraints, using ALTER TABLE. We would need to take the second approach, because the various INSERT commands are all done in the wrong order, so an album gets inserted before the corresponding artist exists, and that is a foreign key violation. So the idea is that we want to first create the tables without any foreign key constraints, then add the values in, and only then alter the tables to have foreign key constraints. Unfortunately DuckDb does not allow an ADD CONSTRAINT during ALTER TABLE, at this point in time, so this is not workable.</li>
      </ul>
      So this is a very real example of the difficulty when working with incompatible systems and data formats, a challenge you should get used to. But there is a way forward, read on.
    </p>
    <p>
      The proper solution for the conversion is specific to your use case, but for us the following works. First create a file called <c>sqlite-create-dump.sql</c> where we specify the order in which we want to dump the tables:
    </p>
    <pre>
      .dump Employee
      .dump Customer
      .dump Invoice
      .dump Artist
      .dump Genre
      .dump MediaType
      .dump Album
      .dump Track
      .dump InvoiceLine
      .dump Playlist
      .dump PlaylistTrack
    </pre>
    <p>
      This order is designed so that the corresponding tables don't require anything that isn't already created beforehand. Then we need to:
      <ul>
        <li>tell SQLite 3 to run this file on the database and show us the results,</li>
        <li>tell a command line tool to replace all square brackets with empty space,</li>
        <li>tell another command line tool to ignore all PRAGMA lines,</li>
        <li>write the result in a new file</li>
      </ul>
      Here is a program that achieves this. It uses a tool called <c>sed</c> that lets you search for patterns and replace them (with nothing in this case). Then it uses another tool called <c>grep</c> that lets you selectively choose which lines to include or not. Finally, it uses <c>&gt;</c> to write the result to a file.
    </p>
    <program language="shell">
      sqlite3 chinook.sqlite &lt; sqlite-create-dump.sql |  \
         sed -E 's/\[|\]//g' |  \
        grep -v '^PRAGMA' &gt; chinook-dump.sql
    </program>
    <p>
      If this looks insane and you'd like a python-based version, you could do something like this, after the basic <c>sqlite3 chinook.sqlite &lt; sqlite-create-dump.sql</c> command:
    </p>
    <program language="python">
      with open("chinook-dump.sql", "r") as f1:
        with open("chinook-dump-fixed.sql", "w") as f2:
            for line in f1.readlines():
                if not line.startswith("PRAGMA"):
                    fixedText = line.replace("[", "").replace("]", "")
                    f2.write(fixedText)
    </program>
    <p>
      This is now a sql file that we can read from other database like <c>duckdb</c>.
    </p>
    </paragraphs>
    <paragraphs>
      <title>Exporting CSV files from SQLite</title>
      <p>
        Before moving on, let's also see how we can export individual tables to CSV files. Luckily this is a bit easier to do. The main steps are:
        <ul>
          <li>First of all we enter the sqlite3 interactive tool for that (we could use a script file too if we wanted)</li>
          <li>If you want headers included, set the headers setting on by running <c>.headers on</c></li>
          <li>Set the mode to CSV by doing <c>.mode csv</c>. At this point you can test with something like <c>SELECT * from Album;</c> and see that the results are showing in a comma-separated form.</li>
          <li>Instruct SQLite3 to write the result of the next command to a file with <c>.once "albums.csv"</c>, then run the query.</li>
          <li>Run the query and you should now see file having the correct contents.</li>
          <li>Repeat the <c>.open + SELECT</c> steps for as many tables as you would like to create. We will keep it to this one table for now as we just want to use it as an example of how DuckDb loads CSV data.</li>
        </ul>
      </p>
    </paragraphs>
  </subsubsection>
</subsection>
